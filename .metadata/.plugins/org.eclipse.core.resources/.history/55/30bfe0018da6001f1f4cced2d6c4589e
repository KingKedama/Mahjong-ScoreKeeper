import org.jibble.pircbot.Colors;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class Tile
{
	public String display;
	public String[] name;
	public int suit,number;
	public static int HONOR=3;
	public static int SOU=2;
	public static int MON=0;
	public static int PIN=1;
	public static String GREYB="\u000301,15";
	public static String WHITEB="\u000301,00";
	public static String YELLOWB="\u000301,08";
	public static Tile nothing=new Tile(-1,-1,"");
	
	public static Tile s1,I=s1=new Tile(SOU,1,Colors.BOLD+"ìÖÉ"
		,"I","bird","the word","the bird","1 sou","‚Ö†","È∫ªÈõÄ","1 BAM","1 of Bamboo","iisou",
		"ìÖÉ");
	public static Tile s2,II=s2=new Tile(SOU,2,Colors.DARK_GREEN+"‚Ö°","II","2 sou","‚Ö°","2 BAM","2 of bamboo","ryanzou","sousou","so-so");
	public static Tile s3,III=s3=new Tile(SOU,3,Colors.DARK_GREEN+"‚Ö¢","III","3 sou","‚Ö¢","3 bam","3 of bamboo","sanzou");
	public static Tile s4,IV=s4=new Tile(SOU,4,Colors.DARK_GREEN+"‚Ö£","IV","4 sou","‚Ö£","4 bam","4 bamboo","sussou");
	public static Tile s5,V=s5=new Tile(SOU,5,"‚Ö§","V","5 sou","‚Ö§","5 bam","5 bamboo","uusou");
	public static Tile s6,VI=s6=new Tile(SOU,6,Colors.DARK_GREEN+"‚Ö•","VI","6 sou","‚Ö•","6 bam","6 bamboo","ryuusou");
	public static Tile s7,VII=s7=new Tile(SOU,7,"‚Ö¶","VII","7 sou","‚Ö¶","7 bam","7 bamboo","chiisou");
	public static Tile s8,VIII=s8=new Tile(SOU,8,Colors.DARK_GREEN+"‚Öß","VIII","8 sou","‚Öß","8 bam","8 bamboo","passou");
	public static Tile s9,IX=s9=new Tile(SOU,9,"‚Ö®","IX","9 sou","‚Ö®","chuusou");
	
	
	public static Tile m1=new Tile(MON,1,"‰∏Ä","1","‰∏Ä","1 man","1 wan","iiwan");
	public static Tile m2=new Tile(MON,2,"‰∫å","2","‰∫å","2 man","2 wan","ryanwan");
	public static Tile m3=new Tile(MON,3,"‰∏â","3","‰∏â","3 man","3 wan","sanwan");
	public static Tile m4=new Tile(MON,4,"Âõõ","4","Âõõ","4 man","4 wan","suuwan");
	public static Tile m5=new Tile(MON,5,"‰ºç","5","‰ºç","‰∫î","5 man","5 wan","uuwan");
	public static Tile m6=new Tile(MON,6,"ÂÖ≠","6","ÂÖ≠","6 man","6 wan","ryuuwan");
	public static Tile m7=new Tile(MON,7,"‰∏É","7","‰∏É","7 man","7 wan","chiiwan");
	public static Tile m8=new Tile(MON,8,"ÂÖ´","8","ÂÖ´","8 man","8 wan","paawan");
	public static Tile m9=new Tile(MON,9,"‰πù","9","‰πù","9 man","9 wan","chuuwan");

	public static Tile p1=new Tile(PIN,1,"‚ë†","(1)","‚ë†","1 pin","circle 1","iipin");
	public static Tile p2=new Tile(PIN,2,"‚ë°","(2)","‚ë°","2 pin","circle 2","ryanpin");
	public static Tile p3=new Tile(PIN,3,"‚ë¢","(3)","‚ë¢","3 pin","circle 3","sanpin");
	public static Tile p4=new Tile(PIN,4,"‚ë£","(4)","‚ë£","4 pin","circle 4","suupin");
	public static Tile p5=new Tile(PIN,5,"‚ë§","(5)","‚ë§","5 pin","circle 5","uupin");
	public static Tile p6=new Tile(PIN,6,"‚ë•","(6)","‚ë•","6 pin","circle 6","ryuupin");
	public static Tile p7=new Tile(PIN,7,"‚ë¶","(7)","‚ë¶","7 pin","circle 7","chiipin");
	public static Tile p9=new Tile(PIN,9,"‚ë®","(9)","cirno","‚ë®","9 pin","circle 9","chuupin");
	public static Tile p8=new Tile(PIN,8,"‚ëß","(8)","‚ëß","8 pin","circle 8","paapin");
	
	public static Tile east=new Tile(HONOR,0,"Êù±","e","Êù±","east","ton");
	public static Tile south=new Tile(HONOR,1,"Âçó","s","Âçó","south","nan");
	public static Tile west=new Tile(HONOR,2,"Ë•ø","w","Ë•ø","west","shaa");
	public static Tile north=new Tile(HONOR,3,"Âåó","n","Âåó","north","pei");
	public static Tile haku,white=haku=new Tile(HONOR,4,"Ôæõ","[]","Ôæõ","haku","white","white dragon","paipan","ÁôΩÊùø");
	public static Tile hatsu,green=hatsu=new Tile(HONOR,5,Colors.DARK_GREEN+"Áôº","g","Áôº","fat","hatsu","green","green dragon","ryuufa","Á∑ëÁô∫");
	public static Tile chun,red=chun=new Tile(HONOR,6,Colors.RED+"‰∏≠","r","‰∏≠","red","chun","red dragon","honchun","Á¥Ö‰∏≠");
	
	public static Tile[] tiles= new Tile[]{I,II,III,IV,V,VI,VII,VIII,IX,
														 m1,m2,m3,m4,m5,m6,m7,m8,m9,
														 p1,p2,p3,p4,p5,p6,p7,p8,p9,
														 I,II,III,IV,V,VI,VII,VIII,IX,
														 m1,m2,m3,m4,m5,m6,m7,m8,m9,
														 p1,p2,p3,p4,p5,p6,p7,p8,p9,
														 I,II,III,IV,V,VI,VII,VIII,IX,
														 m1,m2,m3,m4,m5,m6,m7,m8,m9,
														 p1,p2,p3,p4,p5,p6,p7,p8,p9,
														 I,II,III,IV,V,VI,VII,VIII,IX,
														 m1,m2,m3,m4,m5,m6,m7,m8,m9,
														 p1,p2,p3,p4,p5,p6,p7,p8,p9,
														 east,east,east,east,
														 south,south,south,south,
														 west,west,west,west
														 ,north,north,north,north,
														 haku,haku,haku,haku,
														 hatsu,hatsu,hatsu,hatsu,
														 chun,chun,chun,chun
														 };
	public static Tile[] test= new Tile[]{
		I,II,III,IV,V,VI,VII,VIII,IX,
		 m1,m2,m3,m4,m5,m6,m7,m8,m9,
		 p1,p2,p3,p4,p5,p6,p7,p8,p9,
		 east,south,west,north,haku,hatsu,chun
	};
	
	public Tile(int s,int n,String dis,String ...names)
	{
		suit=s;
		number=n;
		display=WHITEB+dis+Colors.NORMAL;
		name=names;
		
	}
	public static HashMap<String,Tile> mapping=getmapping();
	
	public boolean equals(Tile t)
	{
		return this.suit==t.suit && this.number==t.number;
	}

	public static Vector<Tile> getTiles()
	{
		Vector<Tile>wall=new Vector<Tile>();
		for(Tile t:tiles)
		{
			wall.add(t);
		}
		Collections.shuffle(wall);
		return wall;
	}
	
	public static HashMap<String,Tile> getmapping()
	{
		HashMap<String,Tile> h = new HashMap<String,Tile>();
		for(Tile t:test)
			for(String s:t.name)
			{

				Pattern p=Pattern.compile("(\\w)\\1+");
				Matcher m=p.matcher(s);
				StringBuffer sb=new StringBuffer();
				while(m.find())
				{
					m.appendReplacement(sb,""+ m.group(0).charAt(0));
				}
				m.appendTail(sb);
				h.put(sb.toString().toLowerCase().replace(" ", ""), t);
			}
		return h;
	}
	
	//only use on new hands, insert the newest tile in the proper place for drawn tiles
	public static void sortHand(Vector<Tile> hand)
	{
		for(int i =0;i <hand.size();i++)
		{
			int suit1=hand.elementAt(i).suit;
			int num1=hand.elementAt(i).number;
			for(int j=i+1;j <hand.size();j++)
			{
				int suit2,num2;
				suit2=hand.elementAt(j).suit;
				num2=hand.elementAt(j).number;
				if(suit2 < suit1 || (suit2==suit1 && num2<num1))
				{
					hand.insertElementAt(hand.remove(j),i);
					suit1=suit2;
					num1=num2;
				}
			}
		}
	}
	public String taken()
	{
		return display.replace(WHITEB, GREYB);
	}
	public String riichi()
	{
		return display.replace(WHITEB, YELLOWB);
	}
	public static Tile lookup(String stuff)
	{
		Pattern p=Pattern.compile("(\\w)\\1+");
		Matcher m=p.matcher(stuff);
		StringBuffer sb=new StringBuffer();
		while(m.find())
		{
			m.appendReplacement(sb,""+ m.group(0).toCharArray()[0]);
		}
		m.appendTail(sb);
		String s=sb.toString();
		return mapping.get(s.toLowerCase().replace(" ", "").replace("one", "1").replace("two", "2").replace("three", "3")
			.replace("four", "4").replace("five", "5").replace("six", "6").replace("seven", "7").replace("eight", "8").replace("nine", "9"));
	}
	
}
