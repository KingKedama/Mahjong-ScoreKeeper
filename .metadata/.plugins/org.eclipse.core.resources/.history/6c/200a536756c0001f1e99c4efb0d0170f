import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.io.*;
import java.math.*;

public class Console
{
	public Scanner in;
	public HashMap everyone;
	public HashMap games;
	public Vector<Player> norder;
	public int pot;
	public boolean done;

	public static void main(String[] args)
	{
		Console c = new Console();
		c.mainLoop();

	}

	public Console()
	{
		everyone = new HashMap();
		games = new HashMap();
		norder = new Vector<Player>();
		if (new File("masterlist.txt").exists())
		{
			grabdata();
		}
		else
		{
			File file = new File("masterlist.txt");
			try
			{
				file.createNewFile();
			} catch (IOException e)
			{
				// TODO error
			}
			// TODO make less messy
			try
			{
				BufferedWriter out = new BufferedWriter(new FileWriter("masterlist.txt", true));
				out.write("0");
				out.close();
			} catch (IOException e)
			{
			}
		}
		in = new Scanner(System.in);
	}

	public void mainLoop()
	{
		done = false;
		while (!done)
		{
			System.out.print("#$?");
			String command = in.nextLine();
			parseCommand(command,true);
		}
	}

	public void parseCommand(String command,boolean allowed)
	{
		String[] split = command.split(" ");
		if (split[0].equalsIgnoreCase("player"))
			newplayer(split);
		else if (split[0].equalsIgnoreCase("game"))
			newgame(split, command);
		else if (split[0].equalsIgnoreCase("tadd"))
			tournyadd(split);
		else if (split[0].equalsIgnoreCase("tsumo"))
			tsumo(split, command);
		else if (split[0].equalsIgnoreCase("ron"))
			ron(split, command);
		else if (split[0].equalsIgnoreCase("doubleron"))
			doubleron(split, command);
		else if (split[0].equalsIgnoreCase("tenpai"))
			tenpai(split, command);
		else if (split[0].equalsIgnoreCase("riichi"))
			riichi(split, command);
		else if (split[0].equalsIgnoreCase("switch"))
			changeplayer(split, command);
		else if (split[0].equalsIgnoreCase("round"))
			changeround(split, command);
		else if (split[0].equalsIgnoreCase("bonus"))
			changebonus(split, command);
		else if (split[0].equalsIgnoreCase("dealer"))
			changedealer(split, command);
		else if (split[0].equalsIgnoreCase("freeplay"))
			freegame(split, command);
		else if (split[0].equalsIgnoreCase("score"))
			printscore(split);
		else if (split[0].equalsIgnoreCase("changescore"))
			changescore(split);
		else if (split[0].equalsIgnoreCase("topten"))
			topten();
		else if (split[0].equals("ntgame"))
			ntgame(split, command);
		else if (split[0].equals("3game"))
			ThreePlayer(split, command);
		else if (split[0].equals("end"))
			this.endgame(split);
		else if (split[0].equalsIgnoreCase("day"))
		{
			closingStuff();
		}
		else if (split[0].equals("help"))
			help(split);
		else if(command.trim().equals("")){}
		else
		{
			PrintMessage(split[0] + " is not a valid command");
		}
	}

	// loads info from files
	public void grabdata()
	{
		try
		{
			BufferedReader in = new BufferedReader(new FileReader("masterlist.txt"));
			String str;
			str = in.readLine();
			if (str != null)
			{
				try
				{
					pot = new Integer(str);
				} catch (NumberFormatException e)
				{
					pot = 0;
				}
			}

			while ((str = in.readLine()) != null)
			{
				Player p = readprofile(str);
				if (p != null)
				{
					everyone.put(str, p);
					norder.add(p);
				}
			}
			in.close();
		} catch (IOException e)
		{
			PrintMessage("failed to read masterlist.txt");
			return;
		}
	}

	public Player readprofile(String name)
	{
		if (new File(name + ".csv").exists())
		{
			try
			{
				BufferedReader in = new BufferedReader(new FileReader(name + ".csv"));
				String str, prev = "";
				while ((str = in.readLine()) != null)
				{
					prev = str;
				}
				in.close();
				String[] s = prev.split(",");
				if (s.length >= 2)
				{
					try
					{
						int score = new Integer(s[0]);
						int tscore = new Integer(s[1]);
						return new Player(name, score, tscore);
					} catch (NumberFormatException e)
					{
						PrintMessage(name + ".csv contains errors");
						return null;
					}
				}
				else
				{
					PrintMessage(name + ".csv contains errors");
					return null;
				}
			} catch (IOException e)
			{
				PrintMessage("failed to raed " + name + ".csv");
				return null;
			}
		}
		else
		{
			File file = new File(name + ".csv");
			try
			{
				file.createNewFile();
			} catch (IOException e)
			{
				PrintMessage("failed to create " + name + ".csv");
				return null;
			}
			try
			{
				BufferedWriter out = new BufferedWriter(new FileWriter(name + ".csv", true));
				out.write("regular,tourny,round,game\r\n25000,-100");
				out.close();
			} catch (IOException e)
			{
				PrintMessage("failed to write to " + name + ".csv");
				return null;
			}
			return new Player(name, 25000, -100);

		}
	}

	public void changePot(int amount)
	{
		pot = pot + amount;
		File f = new File("masterlist.txt.back");
		if (f.exists())
			if (!f.delete())
			{
				PrintMessage("failed to delete masterlist.txt.back");
				return;
			}
		f = new File("masterlist.txt");
		if (f.exists())
		{
			if (!f.renameTo(new File("masterlist.txt.back")))
			{
				PrintMessage("failed to rename masterlist.txt");
				return;
			}
		}
		else
		{
			PrintMessage("masterlist.txt not found");
			return;
		}
		File file = new File("masterlist.txt");
		try
		{
			file.createNewFile();
		} catch (IOException e)
		{
			PrintMessage("failed to create masterlist.txt");
			return;
		}
		try
		{
			BufferedWriter out = new BufferedWriter(new FileWriter("masterlist.txt", true));
			out.write("" + pot);

			for (int i = 0; i < norder.size(); i++)
			{
				out.write("\r\n" + norder.elementAt(i).name);
			}
			out.close();
		} catch (IOException e)
		{
			PrintMessage("failed to write to masterlist.txt");
		}

	}

	public void newplayer(String[] split)
	{
		for (int i = 1; i < split.length; i++)
		{
			String name = split[i];
			if (!new File(name + ".csv").exists())
			{
				Player p = readprofile(name);
				try
				{
					BufferedWriter out = new BufferedWriter(new FileWriter("masterlist.txt", true));
					out.write("\r\n" + name);
					out.close();
				} catch (IOException e)
				{
					PrintMessage("failed to write to masterlist.txt");
				}
				everyone.put(name, p);
				norder.add(p);
				PrintMessage("created player: " + name);
			}
			else
			{
				PrintMessage(name + ".csv already exists");
			}
		}
	}

	public void newgame(String[] split, String command)
	{
		if (split.length == 6)
		{
			String name = split[1];
			String east = split[2];
			String south = split[3];
			String west = split[4];
			String north = split[5];
			Player e = (Player) everyone.get(east);
			Player s = (Player) everyone.get(south);
			Player w = (Player) everyone.get(west);
			Player n = (Player) everyone.get(north);
			if (e != null && s != null && w != null && n != null)
			{
				SimpleDateFormat f = new SimpleDateFormat("yy-MM-dd-HHmm");

				String filename = name + f.format(new Date()) + ".csv";
				if (new File(filename).exists())
				{
					PrintMessage(filename + " already exists");
					return;
				}
				File file = new File(filename);
				try
				{
					file.createNewFile();
				} catch (IOException ee)
				{
					PrintMessage("failed to create " + filename);
					return;
				}

				File detail = new File(filename.substring(0, filename.length() - 4) + "detail.txt");
				try
				{
					file.createNewFile();
				} catch (IOException ee)
				{
					PrintMessage("failed to create " + filename.split(".")[0] + "detail.txt");
				}
				try
				{
					BufferedWriter out = new BufferedWriter(new FileWriter(filename, true));
					out.write("hand,East,South,West,North,Bonus,Riichi");
					out.close();
				} catch (IOException eee)
				{
					PrintMessage("failed to write to " + filename);
					return;
				}
				if (!games.containsKey(name))
				{
					TournyGame m = new TournyGame(e, s, w, n, this, filename, true);
					games.put(name, m);
					m.updatedetail(command);
				}
				else
				{
					PrintMessage(name + " is a currently running game");
					return;
				}
			}
			else
			{
				if (e == null)
					PrintMessage(split[2] + "does not exist");
				if (s == null)
					PrintMessage(split[3] + "does not exist");
				if (w == null)
					PrintMessage(split[4] + "does not exist");
				if (n == null)
					PrintMessage(split[5] + "does not exist");
				return;
			}
		}
		else
		{
			PrintMessage("Syntax:!game [name] [eastplayer] [southplayer] [westplayer] [northplayer]");
		}
	}

	public void tournyadd(String[] split)
	{
		for (int i = 1; i < split.length; i++)
		{
			Player p = (Player) everyone.get(split[i]);
			if (p != null)
			{
				if (p.tournyscore < 0)
				{

					try
					{
						BufferedWriter out = new BufferedWriter(new FileWriter(p.name + ".csv", true));
						out.write("\r\n" + p.score + "," + 50000);
						out.close();
					} catch (IOException e)
					{
						PrintMessage("failed to write to " + p.name + ".csv");
						return;
					}
					p.tournyscore = 50000;
					changePot(10000);
					PrintMessage("added " + p.name + " to tourny");
				}
				else
				{
					PrintMessage(p.name + " is already in the tourny");
				}
			}
			else
			{
				PrintMessage(split[i] + " does not exist");

			}
		}
	}

	public void tsumo(String[] split, String command)
	{
		try
		{
			if (split.length == 5)
			{
				TournyGame m = (TournyGame) games.get(split[1]);
				if (m != null)
				{
					String p = split[2];
					if (!m.exists(new String[]
					{ split[2] }))
						return;
					int hou = new Integer(split[3]);
					if (split[4].equalsIgnoreCase("y"))
						m.tsumo(p, hou, -1);
					else if (split[4].equalsIgnoreCase("dy"))
						m.tsumo(p, hou, -2);
					else
					{
						int han = new Integer(split[4]);
						m.tsumo(p, hou, han);
					}
					m.updatedetail(command);

				}
				else
				{
					PrintMessage(split[1] + " is not a game");
				}
			}
			else
			{
				System.out.println("Syntax:!tsumo [game] [winner] [hou] [han|y|dy]");
			}
		} catch (NumberFormatException e)
		{
			PrintMessage("Syntax:!tsumo [game] [winner] [hou] [han|y|dy]");
		}
	}

	public void ron(String[] split, String command)
	{
		try
		{
			if (split.length == 6)
			{
				TournyGame m = (TournyGame) games.get(split[1]);
				if (m != null)
				{
					String p = split[2];
					String p2 = split[5];
					if (!m.exists(new String[]
					{ p, p2 }))
						return;
					int hou = new Integer(split[3]);
					if (split[4].equalsIgnoreCase("y"))
						m.ron(p, p2, hou, -1);
					else if (split[4].equalsIgnoreCase("dy"))
						m.ron(p, p2, hou, -2);
					else
					{
						int han = new Integer(split[4]);
						m.ron(p, p2, hou, han);
					}
					m.update();
					m.printnextround();
					m.updatedetail(command);

				}
				else
				{
					PrintMessage(split[1] + " is not a valid game");
				}
			}
			else
			{
				System.out.println("Syntax:!ron [game] [winner] [hou] [han|y|dy] [loser]");
			}
		} catch (NumberFormatException e)
		{
			System.out.println("Syntax:!ron [game] [winner] [hou] [han|y|dy] [loser]");
		}
	}

	public void tenpai(String[] split, String command)
	{
		TournyGame m = (TournyGame) games.get(split[1]);
		if (m != null)
		{
			String[] play = new String[split.length - 2];
			for (int i = 2, j = 0; i < split.length; i++, j++)
				play[j] = split[i];
			if (!m.exists(play))
				return;
			m.tenpai(play);
			m.updatedetail(command);

		}
		else
		{
			PrintMessage(split[1] + " is not a game");
		}
	}

	public void riichi(String[] split, String command)
	{
		if (split.length != 3)
		{
			PrintMessage("Syntax:!riichi [game] [player]");
			return;
		}
		TournyGame m = (TournyGame) games.get(split[1]);
		if (m == null)
		{
			PrintMessage(split[1] + "is not a game");
			return;
		}
		String p = split[2];

		if (!m.exists(new String[]
		{ p }))
			return;
		if (m.riichi(p))
			m.updatedetail(command);
	}

	public void closingStuff()
	{
		if (!new File("everyone.csv").exists())
		{
			File file = new File("everyone.csv");
			try
			{
				file.createNewFile();
			} catch (IOException e)
			{
				PrintMessage("failed to create everyone.csv");
			}

			try
			{
				BufferedWriter out = new BufferedWriter(new FileWriter("everyone.csv", true));
				out.write(norder.elementAt(0).name);
				for (int i = 1; i < norder.size(); i++)
					out.write("," + norder.elementAt(i).name);
				out.close();
			} catch (IOException e)
			{
				PrintMessage("failed to write to everyone.csv");
			}
		}
		if (!new File("tourny.csv").exists())
		{
			File file = new File("tourny.csv");
			try
			{
				file.createNewFile();
			} catch (IOException e)
			{
				PrintMessage("failed to create tourny.csv");
			}

			try
			{
				BufferedWriter out = new BufferedWriter(new FileWriter("tourny.csv", true));
				out.write("pot");
				for (int i = 0; i < norder.size(); i++)
					out.write("," + norder.elementAt(i).name);
				out.close();
			} catch (IOException e)
			{
				PrintMessage("failed to write to tourny.csv");
			}
		}
		// write latest to everyone and tourny
		try
		{
			BufferedWriter out = new BufferedWriter(new FileWriter("everyone.csv", true));
			out.write("\r\n" + norder.elementAt(0).score);
			for (int i = 1; i < norder.size(); i++)
				out.write("," + norder.elementAt(i).score);
			out.close();
		} catch (IOException e)
		{
			PrintMessage("failed to write to everyone.csv");
		}
		try
		{
			BufferedWriter out = new BufferedWriter(new FileWriter("tourny.csv", true));
			out.write("\r\n" + pot);
			for (int i = 0; i < norder.size(); i++)
				out.write("," + norder.elementAt(i).tournyscore);
			out.close();
		} catch (IOException e)
		{
			PrintMessage("failed to write to tourny.csv");
		}
	}

	public void changeplayer(String[] split, String command)
	{
		if (split.length != 4)
		{
			PrintMessage("Syntax:!switch [game] [oldplayer] [newplayer]");
			return;
		}
		TournyGame m = (TournyGame) games.get(split[1]);
		if (m == null)
		{
			PrintMessage(split[1] + " is not an existing game");
			return;
		}
		String p = split[2];
		if (!m.exists(new String[]
		{ p }))
			return;
		if (m.record)
		{
			Player p2 = (Player) everyone.get(split[3]);
			if (p2 == null)
			{
				PrintMessage(split[3] + " does not exist");
				return;
			}
			if (p2 == m.players[0] || p2 == m.players[1] || p2 == m.players[2] || p2 == m.players[3])
			{
				PrintMessage(split[3] + " is already in " + split[1]);
				return;
			}

			m.changeplayer(p, p2);
		}
		else
			m.changeplayer(p, new Player(split[3], 25000, -100));
		m.printgamestatus();
		m.updatedetail(command);

	}

	public void doubleron(String[] split, String command)
	{
		if (split.length != 9)
		{
			System.out.println("Syntax:!doubleron [game] [winner1] [hou] [han|y|dy] [winner2] [hou] [han|y|dy] [loser]");
			return;
		}
		TournyGame m = (TournyGame) games.get(split[1]);
		if (m == null)
		{
			PrintMessage(split[1] + " is not an existing game");
			return;
		}
		String winner1 = split[2];

		String winner2 = split[5];
		String loser = split[8];
		if (!m.exists(new String[]
		{ winner1, winner2, loser }))
			return;
		int hou1, han1, hou2, han2;
		try
		{
			hou1 = new Integer(split[3]);
			if (split[4].equalsIgnoreCase("y"))
				han1 = -1;
			else if (split[4].equalsIgnoreCase("dy"))
				han1 = -2;
			else
			{
				han1 = new Integer(split[4]);
			}
		} catch (NumberFormatException e)
		{
			System.out.println("Syntax:!doubleron [game] [winner1] [hou] [han|y|dy] [winner2] [hou] [han|y|dy] [loser]");
			return;
		}
		try
		{
			hou2 = new Integer(split[6]);
			if (split[7].equalsIgnoreCase("y"))
				han2 = -1;
			else if (split[7].equalsIgnoreCase("dy"))
				han2 = -2;
			else
			{
				han2 = new Integer(split[7]);
			}
		} catch (NumberFormatException e)
		{
			System.out.println("Syntax:!doubleron [game] [winner1] [hou] [han|y|dy] [winner2] [hou] [han|y|dy] [loser]");
			return;
		}
		m.doubleron(winner1, winner2, loser, hou1, han1, hou2, han2);
		m.updatedetail(command);

	}

	public void changeround(String[] split, String command)
	{
		if (split.length != 3)
		{
			PrintMessage("Syntax:!round [game] [east|south|west|north|#]");
			return;
		}
		TournyGame m = (TournyGame) games.get(split[1]);
		if (m == null)
		{
			PrintMessage(split[1] + " is not an existing game");
			return;
		}
		if (split[2].equalsIgnoreCase("east"))
			m.setround(0);
		else if (split[2].equalsIgnoreCase("south"))
			m.setround(1);
		else if (split[2].equalsIgnoreCase("west"))
			m.setround(2);
		else if (split[2].equalsIgnoreCase("north"))
			m.setround(3);
		else
			try
			{

				m.setround(new Integer(split[2]) - 1);
			} catch (NumberFormatException e)
			{
				System.out.println("Syntax:!round [game] [east|south|west|north|#]");
				return;
			}
		m.printnextround();
		m.updatedetail(command);
	}

	public void changebonus(String[] split, String command)
	{
		if (split.length != 3)
		{
			PrintMessage("Syntax:!bonus [game] [#]");
			return;
		}
		TournyGame m = (TournyGame) games.get(split[1]);
		if (m == null)
		{
			PrintMessage(split[1] + " is not an existing game");
			return;
		}
		try
		{
			int b = new Integer(split[2]);
			if (b < 0)
			{
				PrintMessage("bonus cannot be negative");
				return;
			}
			m.setbonus(b);
		} catch (NumberFormatException e)
		{
			PrintMessage("Syntax:!bonus [game] [#]");
			return;
		}
		m.printnextround();
		m.updatedetail(command);
	}

	public void changedealer(String[] split, String command)
	{
		if (split.length != 3)
		{
			PrintMessage("Syntax:!dealer [game] [name]");
			return;
		}
		TournyGame m = (TournyGame) games.get(split[1]);
		if (m == null)
		{
			PrintMessage(split[1] + " is not an existing game");
			return;
		}
		if (!m.exists(new String[]
		{ split[2] }))
			return;
		m.setdealer(split[2]);
		m.printnextround();
		m.updatedetail(command);
	}

	public void freegame(String[] split, String command)
	{
		if (split.length == 6)
		{
			String name = split[1];
			String east = split[2];
			String south = split[3];
			String west = split[4];
			String north = split[5];
			Player e = new Player(east, 25000, -100);
			Player s = new Player(south, 25000, -100);
			Player w = new Player(west, 25000, -100);
			Player n = new Player(north, 25000, -100);
			SimpleDateFormat f = new SimpleDateFormat("yy-MM-dd-HHmm");

			String filename = name + f.format(new Date()) + ".csv";
			if (new File(filename).exists())
			{
				PrintMessage(filename + " already exists");
				return;
			}
			File file = new File(filename);
			try
			{
				file.createNewFile();
			} catch (IOException ee)
			{
				PrintMessage("failed to create " + filename);
				return;
			}

			File detail = new File(filename.substring(0, filename.length() - 4) + "detail.txt");
			try
			{
				file.createNewFile();
			} catch (IOException ee)
			{
				PrintMessage("failed to create " + filename.split(".")[0] + "detail.txt");
			}
			try
			{
				BufferedWriter out = new BufferedWriter(new FileWriter(filename, true));
				out.write("hand,East,South,West,North,Bonus,Riichi");
				out.close();
			} catch (IOException eee)
			{
				PrintMessage("failed to write to " + filename);
				return;
			}

			if (!games.containsKey(name))
			{
				TournyGame m = new NTGame(e, s, w, n, this, filename, false);
				games.put(name, m);
				m.updatedetail(command);
			}
			else
			{
				PrintMessage(name + " is a currently running game");
				return;
			}

		}
		else
		{
			PrintMessage("Syntax:!freeplay [name] [eastplayer] [southplayer] [westplayer] [northplayer]");
		}
	}

	public void endgame(String[] split)
	{
		if (split.length != 2)
		{
			PrintMessage("Syntax:!end [game]");
			return;
		}
		try{
		if (games.containsKey(split[1]))
		{
			PrintMessage("ending game "+split[1]);
			games.remove(split[1]);
		}
		else
			PrintMessage(split[1] + " is not a current game");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	public void help(String[] split)
	{
		if (split.length == 1)
		{
			PrintMessage("Commands:player,game,tadd," + "tsumo,ron,doubleron,tenpai,riichi," + "switch,round,bonus,dealer,freeplay," + "end,help,day,ntgame,3game");
			PrintMessage("type help [command] for details");
		}
		else if (split.length == 2)
		{
			if (split[1].equals("player"))
			{
				PrintMessage("Syntax:!player [list of names]");
				PrintMessage("creates a new player and file for each name in [list of names]. " + "names must contain only characters valid in file names");
			}
			else if (split[1].equals("game"))
			{
				PrintMessage("Syntax:!game [name] [eastplayer] [southplayer] [westplayer] [northplayer]");
				PrintMessage("creates a game. all players must exist");
			}
			else if (split[1].equals("tadd"))
			{
				PrintMessage("Syntax:!tadd [list of players]");
				PrintMessage("adds each player in [list of players] to the tournament, giving them 25000 starting points and adding 5000 to the pot.");
			}
			else if (split[1].equals("tsumo"))
				PrintMessage("Syntax:!tsumo [game] [winner] [hou] [han|y|dy]");
			else if (split[1].equals("ron"))
				PrintMessage("Syntax:!ron [game] [winner] [hou] [han|y|dy] [loser]");
			else if (split[1].equals("doubleron"))
				PrintMessage("Syntax:!doubleron [game] [winner1] [hou] [han|y|dy] [winner2] [hou] [han|y|dy] [loser]");
			else if (split[1].equals("tenpai"))
			{
				PrintMessage("Syntax:!tenpai [game] [list of names]");
				PrintMessage("in the case where 2 people are in tenpai and exactly 3 of the players in [game] are in the tourny, players normal scores are calculated as usual but tournament scores are calculated based on a payout of 2000 from losers to winners ignoring the non-tournament player.");
			}
			else if (split[1].equals("riichi"))
			{
				PrintMessage("Syntax:!riichi [game] [player]");
				PrintMessage("a tournament player cannot riichi with less than 1000 tournament points." + "  tournament riichies go to the pot if they do not go to a tournament player. " + "money is not actually taken for riichies untill the end of a hand.");
			}
			else if (split[1].equals("switch"))
			{
				PrintMessage("Syntax:!switch [game] [oldplayer] [newplayer]");
				PrintMessage("takes [oldplayer] out of [game] and puts [newplayer] in at [oldplayer's position." + "  the position of dealer, bonus rounds, and riichies on the table does not change.");
			}
			else if (split[1].equals("round"))
			{
				PrintMessage("Syntax:!round [game] [east|south|west|north|#]");
				PrintMessage("manually changes the round of [game]." + "1-4 =east-north, 5 and higher are ???(#-4) (so 5 is ???1");
			}
			else if (split[1].equals("bonus"))
			{
				PrintMessage("Syntax:!bonus [game] [#]\n" + "sets the number of bonus rounds to [#]");
			}
			else if (split[1].equals("dealer"))
			{
				PrintMessage("Syntax:!dealer [game] [name]");
				PrintMessage("sets the dealer to the player [name]," + " but does not change number of bonus rounds");
			}
			else if (split[1].equals("freeplay"))
			{
				PrintMessage("Syntax:!freeplay [name] [eastplayer] [southplayer] [westplayer] [northplayer]");
				PrintMessage("creates a freeplay game that does not count toward overall tournament or regular scores. " + "each player starts with 25000, and need not exist in the masterlist. " + "game summery and detail files are still created");
			}
			else if (split[1].equals("end"))
			{
				PrintMessage("Syntax:!end [game]\n");
				PrintMessage("frees up a game's name, so it can be used again");
			}
			else if (split[1].equals("help"))
			{
				PrintMessage("Syntax:!help | help [command]");
			}
			else if (split[1].equals("day"))
				PrintMessage("causes a line to be written to both everyone.csv and tourny.csv");
			else if (split[1].equals("ntgame"))
			{
				PrintMessage("Systax:ntgame [name] [eastplayer] [southplayer] [westplayer] [northplayer]");
				PrintMessage("creates a non-tournament game. overall normal scores are still affected");
			}
			else if (split[1].equals("3game"))
			{
				PrintMessage("Syntax:!3game [name] [eastplayer] [southplayer] [westplayer]");
				PrintMessage("creates a 3 player game. player's overall scores are not affected");
			}
			else
			{
				PrintMessage(split[1] +" is not a command");
			}
		}
		else
		{
			PrintMessage("Commands:player,game,tadd," + "tsumo,ron,doubleron,tenpai,riichi," + "switch,round,bonus,dealer,freeplay," + "end,help,day,ntgame,3game");
			PrintMessage("type help [command] for details");
		}
	}

	public void ntgame(String[] split, String command)
	{
		if (split.length == 6)
		{
			String name = split[1];
			String east = split[2];
			String south = split[3];
			String west = split[4];
			String north = split[5];
			Player e = (Player) everyone.get(east);
			Player s = (Player) everyone.get(south);
			Player w = (Player) everyone.get(west);
			Player n = (Player) everyone.get(north);
			if (e != null && s != null && w != null && n != null)
			{
				SimpleDateFormat f = new SimpleDateFormat("yy-MM-dd-HHmm");

				String filename = name + f.format(new Date()) + ".csv";
				if (new File(filename).exists())
				{
					PrintMessage(filename + " already exists");
					return;
				}
				File file = new File(filename);
				try
				{
					file.createNewFile();
				} catch (IOException ee)
				{
					PrintMessage("failed to create " + filename);
					return;
				}

				File detail = new File(filename.substring(0, filename.length() - 4) + "detail.txt");
				try
				{
					file.createNewFile();
				} catch (IOException ee)
				{
					PrintMessage("failed to create " + filename.split(".")[0] + "detail.txt");
				}
				try
				{
					BufferedWriter out = new BufferedWriter(new FileWriter(filename, true));
					out.write("hand,East,South,West,North,Bonus,Riichi");
					out.close();
				} catch (IOException eee)
				{
					PrintMessage("failed to write to " + filename);
					return;
				}
				if (!games.containsKey(name))
				{
					TournyGame m = new NTGame(e, s, w, n, this, filename, true);
					games.put(name, m);
					m.updatedetail(command);
				}
				else
				{
					PrintMessage(name + " is a currently running game");
					return;
				}
			}
			else
			{
				if (e == null)
					PrintMessage(split[2] + "does not exist");
				if (s == null)
					PrintMessage(split[3] + "does not exist");
				if (w == null)
					PrintMessage(split[4] + "does not exist");
				if (n == null)
					PrintMessage(split[5] + "does not exist");
				return;
			}
		}
		else
		{
			PrintMessage("Syntax:!ntgame [name] [eastplayer] [southplayer] [westplayer] [northplayer]");
		}
	}

	public void ThreePlayer(String[] split, String command)
	{
		if (split.length == 5)
		{
			String name = split[1];
			String east = split[2];
			String south = split[3];
			String west = split[4];
			Player e = new Player(east, 35000, -100);
			Player s = new Player(south, 35000, -100);
			Player w = new Player(west, 35000, -100);
			SimpleDateFormat f = new SimpleDateFormat("yy-MM-dd-HHmm");
			String filename = name + f.format(new Date()) + ".csv";
			if (new File(filename).exists())
			{
				PrintMessage(filename + " already exists");
				return;
			}
			File file = new File(filename);
			try
			{
				file.createNewFile();
			} catch (IOException ee)
			{
				PrintMessage("failed to create " + filename);
				return;
			}

			File detail = new File(filename.substring(0, filename.length() - 4) + "detail.txt");
			try
			{
				file.createNewFile();
			} catch (IOException ee)
			{
				PrintMessage("failed to create " + filename.split(".")[0] + "detail.txt");
			}
			try
			{
				BufferedWriter out = new BufferedWriter(new FileWriter(filename, true));
				out.write("hand,East,South,West,Bonus,Riichi");
				out.close();
			} catch (IOException eee)
			{
				PrintMessage("failed to write to " + filename);
				return;
			}

			if (!games.containsKey(name))
			{
				TournyGame m = new ThreeGame(e, s, w, this, filename);
				games.put(name, m);
				m.updatedetail(command);
			}
			else
			{
				PrintMessage(name + " is a currently running game");
				return;
			}

		}
		else
		{
			PrintMessage("Syntax:!freeplay [name] [eastplayer] [southplayer] [westplayer] [northplayer]");
		}

	}

	public void PrintMessage(String mess)
	{
		System.out.println(mess);
	}
	
	
	public void printscore(String [] split)
	{
		if(split.length!=2)
		{
			PrintMessage("Syntax:!score [player]");
			return;
		}
		Player p = (Player)everyone.get(split[1]);
		if(p==null)
		{
			PrintMessage(split[1]+" does not exist");
			return;
		}
		PrintMessage("regular: "+p.score);
		PrintMessage("tourny: "+p.tournyscore);
	}
	
	public void changescore(String [] split)
	{
		if(split.length!=3)
		{
			return;
		}
		Player p = (Player)everyone.get(split[1]);
		if(p==null)
		{
			PrintMessage(split[1]+" does not exist");
			return;
		}
		int amount=0;
		try
		{
			 amount=new Integer(split[2]);
		}
		catch(NumberFormatException e){PrintMessage(split[2]+" is not a number");return;}
		p.tournyscore=p.tournyscore+amount;
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(
					p.name + ".csv", true));
			out.write("\r\n" + p.score + ","
					+ p.tournyscore+","+" "+","+"correction");
			out.close();
		} catch (IOException e) {
			PrintMessage("failed to write to "+p.name+".csv");
			p.tournyscore=p.tournyscore-amount;
			return;
		}
	}
	
	public void topn(String[] split)
	{
		
		int n=0;
		try{
			n=new Integer(split[1]);
		}
		catch(NumberFormatException e)
		{
			return;
		}
		if(n <=0)
			return;
		Player[] top = new Player[n];
		for(Player p: (Collection<Player>)everyone.values())
		{
			for(int i=0;i < n;i++)
			{
				if(top[i]==null)
				{
					top[i]=p;
					break;
				}
				if(top[i].tournyscore < p.tournyscore)
				{
					Player temp=top[i];
					top[i]=p;
					p=temp;
				}
			}
		}
		for(int i=0;i < n;i++)
		{
			if(top[i]==null)
				break;
			PrintMessage((i+1)+". "+top[i].name+" "+top[i].tournyscore);
		}
		
	}
}
